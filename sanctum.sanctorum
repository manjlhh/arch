#!/usr/bin/env bash

! type openssl >/dev/null 2>&1 && APPS="$APPS openssl"
! type curl >/dev/null 2>&1 && APPS="$APPS curl"
! type unzip >/dev/null 2>&1 && APPS="$APPS unzip"
[ -n "$APPS" ] && sudo pacman -Sy "$APPS" --noconfirm --needed

mkdir -p $HOME/repo

# encode:
# printf 'text' | openssl aes-256-cbc -a -A -salt -pbkdf2 -pass 'pass:<passphare>'
# decode:
# printf 'text' | openssl aes-256-cbc -a -A -d -pbkdf2 -pass 'pass:<passphare>'

SSD="$HOME/repo/sanctum.sanctorum"
SSP="$SSD/dec/sanctum.sanctorum.kdbx"
SSK="$SSD/.sanctum.sanctorum"

## kdbx
if [ ! -d "$SSD" ]; then
    git clone https://github.com/manjlhh/sanctum.sanctorum.git "$SSD"
    sh "$SSD/prepare.sh"

    while : ; do
        [ -z "$passphrase" ] && echo 'enter password for kdb archive:' && read -ers passphrase
        sh -c "cd $SSD; ./decode.sh $passphrase"
        [ $? -eq 0 ] && break
        unset passphrase
    done
fi

if [ ! -f "$SSK" ]; then
    while : ; do
        echo "enter password for $SSK:" && read -ers z
        [ -z "$z" ] && break
        sh -c "cd $SSD; ./extract_sanctum_sanctorum.sh $z"
        [ $? -eq 0 ] && break
        unset z
    done

    sh -c "cd $SSD; ./fill_sanctum_sanctorum.sh"
fi

### uncomment the next block if credentials are stored in dot files
# dots.secret
# if [ ! -f $HOME/.dots.secret ]; then
#     while : ; do
#         [ -z $passphrase ] && echo 'enter kdbx password:' && read -ers passphrase

#         yes $passphrase | keepassxc-cli attachment-export -k $SANCTUM_SANCTORUM $MAN_KDBX 'dots.secret' '.dots.secret' $HOME/.dots.secret
#         [ $? -eq 0 ] && break
#     done

#     hash=$([ -f $HOME/.dots.secret ] && shasum -a 512 $HOME/.dots.secret | awk '{ print $1 }' || echo 0)
#     hash=${hash:0:64}
#     [ $hash != 'd5f37e719c1af84da39fbef77908b8fb1b8e14737f7c02aa2206cc3adeb4e8be' ] && echo 'wrong dots.secret file content' && exit 1
#     chmod 0400 $HOME/.dots.secret
# fi

# REPOSOTORIES
get_token () {
    if [ -n "$token" ]; then
        return
    fi
    [ -z "$passphrase" ] && echo 'enter kdbx password:' && read -ers passphrase
    token=$(yes "$passphrase" | keepassxc-cli show -q -a Password -s -k "$SSK" "$SSP" Repositories/GitHub/token)
}
# settings
if [ ! -d "$HOME/repo/settings" ]; then
    get_token

    git clone "https://manjlhh:${token}@github.com/manjlhh/settings.git" "$HOME/repo/settings"
    sh -c 'cd $HOME/repo/settings; git remote set-url origin git@github.com:manjlhh/settings.git'
fi
# scripts
if [ ! -d $HOME/repo/scripts ]; then
    get_token

    git clone https://manjlhh:${token}@github.com/manjlhh/scripts.git $HOME/repo/scripts
    sh -c 'cd $HOME/repo/scripts; git remote set-url origin git@github.com:manjlhh/scripts.git'
fi
# dots
if [ ! -d "$HOME/repo/dots" ]; then
    get_token

    git clone "https://manjlhh:${token}@github.com/manjlhh/dots.git" "$HOME/repo/dots"
    sh -c 'cd $HOME/repo/dots; git remote set-url origin git@github.com:manjlhh/dots.git'
fi

# this repo - arch
sh -c "cd $HOME/repo/arch; git remote set-url origin git@github.com:manjlhh/arch.git"
